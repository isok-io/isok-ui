/* tslint:disable */
/* eslint-disable */
/**
 * ISOK API
 * Openapi of isok api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CheckSchemaTextInputVariant } from './CheckSchemaTextInputVariant';
import {
    CheckSchemaTextInputVariantFromJSON,
    CheckSchemaTextInputVariantFromJSONTyped,
    CheckSchemaTextInputVariantToJSON,
    CheckSchemaTextInputVariantToJSONTyped,
} from './CheckSchemaTextInputVariant';

/**
 * 
 * @export
 * @interface CheckSchemaInputKindOneOf
 */
export interface CheckSchemaInputKindOneOf {
    /**
     * 
     * @type {string}
     * @memberof CheckSchemaInputKindOneOf
     */
    defaultValue?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CheckSchemaInputKindOneOf
     */
    placeholder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CheckSchemaInputKindOneOf
     */
    type: CheckSchemaInputKindOneOfTypeEnum;
    /**
     * 
     * @type {CheckSchemaTextInputVariant}
     * @memberof CheckSchemaInputKindOneOf
     */
    variant: CheckSchemaTextInputVariant;
}


/**
 * @export
 */
export const CheckSchemaInputKindOneOfTypeEnum = {
    Text: 'Text'
} as const;
export type CheckSchemaInputKindOneOfTypeEnum = typeof CheckSchemaInputKindOneOfTypeEnum[keyof typeof CheckSchemaInputKindOneOfTypeEnum];


/**
 * Check if a given object implements the CheckSchemaInputKindOneOf interface.
 */
export function instanceOfCheckSchemaInputKindOneOf(value: object): value is CheckSchemaInputKindOneOf {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('variant' in value) || value['variant'] === undefined) return false;
    return true;
}

export function CheckSchemaInputKindOneOfFromJSON(json: any): CheckSchemaInputKindOneOf {
    return CheckSchemaInputKindOneOfFromJSONTyped(json, false);
}

export function CheckSchemaInputKindOneOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckSchemaInputKindOneOf {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultValue': json['default_value'] == null ? undefined : json['default_value'],
        'placeholder': json['placeholder'] == null ? undefined : json['placeholder'],
        'type': json['type'],
        'variant': CheckSchemaTextInputVariantFromJSON(json['variant']),
    };
}

export function CheckSchemaInputKindOneOfToJSON(json: any): CheckSchemaInputKindOneOf {
    return CheckSchemaInputKindOneOfToJSONTyped(json, false);
}

export function CheckSchemaInputKindOneOfToJSONTyped(value?: CheckSchemaInputKindOneOf | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'default_value': value['defaultValue'],
        'placeholder': value['placeholder'],
        'type': value['type'],
        'variant': CheckSchemaTextInputVariantToJSON(value['variant']),
    };
}

