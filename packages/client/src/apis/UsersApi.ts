/* tslint:disable */
/* eslint-disable */
/**
 * ISOK API
 * Openapi of isok api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchUser,
  UserView,
} from '../models/index';
import {
    PatchUserFromJSON,
    PatchUserToJSON,
    UserViewFromJSON,
    UserViewToJSON,
} from '../models/index';

export interface EditMeV1Request {
    patchUser: PatchUser;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Delete current user
     */
    async deleteMeV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete current user
     */
    async deleteMeV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMeV1Raw(initOverrides);
    }

    /**
     * Modify current user email/password
     */
    async editMeV1Raw(requestParameters: EditMeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['patchUser'] == null) {
            throw new runtime.RequiredError(
                'patchUser',
                'Required parameter "patchUser" was null or undefined when calling editMeV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserToJSON(requestParameters['patchUser']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Modify current user email/password
     */
    async editMeV1(requestParameters: EditMeV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.editMeV1Raw(requestParameters, initOverrides);
    }

    /**
     * Get current user
     */
    async getMeV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserView>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserViewFromJSON(jsonValue));
    }

    /**
     * Get current user
     */
    async getMeV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserView> {
        const response = await this.getMeV1Raw(initOverrides);
        return await response.value();
    }

}
