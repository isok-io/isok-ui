/* tslint:disable */
/* eslint-disable */
/**
 * ISOK API
 * Openapi of isok api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrganisationInput,
  OrganisationSimpleView,
  OrganisationView,
} from '../models/index';
import {
    OrganisationInputFromJSON,
    OrganisationInputToJSON,
    OrganisationSimpleViewFromJSON,
    OrganisationSimpleViewToJSON,
    OrganisationViewFromJSON,
    OrganisationViewToJSON,
} from '../models/index';

export interface AddOrgMemberV1Request {
    organisationId: string;
    body: string;
}

export interface CreateOrgV1Request {
    organisationInput: OrganisationInput;
}

export interface DeleteOrgV1Request {
    organisationId: string;
}

export interface GetOrgV1Request {
    organisationId: string;
}

export interface RemoveOrgMemberV1Request {
    organisationId: string;
    userId: string;
}

export interface RenameOrgV1Request {
    organisationId: string;
    organisationInput: OrganisationInput;
}

/**
 * 
 */
export class OrganisationsApi extends runtime.BaseAPI {

    /**
     * Add a member to an organisation
     */
    async addOrgMemberV1Raw(requestParameters: AddOrgMemberV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organisationId'] == null) {
            throw new runtime.RequiredError(
                'organisationId',
                'Required parameter "organisationId" was null or undefined when calling addOrgMemberV1().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addOrgMemberV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations/{organisation_id}/members`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters['organisationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a member to an organisation
     */
    async addOrgMemberV1(requestParameters: AddOrgMemberV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addOrgMemberV1Raw(requestParameters, initOverrides);
    }

    /**
     * Create a new organisation
     */
    async createOrgV1Raw(requestParameters: CreateOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['organisationInput'] == null) {
            throw new runtime.RequiredError(
                'organisationInput',
                'Required parameter "organisationInput" was null or undefined when calling createOrgV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationInputToJSON(requestParameters['organisationInput']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new organisation
     */
    async createOrgV1(requestParameters: CreateOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createOrgV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a organisation
     */
    async deleteOrgV1Raw(requestParameters: DeleteOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organisationId'] == null) {
            throw new runtime.RequiredError(
                'organisationId',
                'Required parameter "organisationId" was null or undefined when calling deleteOrgV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations/{organisation_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters['organisationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a organisation
     */
    async deleteOrgV1(requestParameters: DeleteOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrgV1Raw(requestParameters, initOverrides);
    }

    /**
     * Get an organisation by id
     */
    async getOrgV1Raw(requestParameters: GetOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationView>> {
        if (requestParameters['organisationId'] == null) {
            throw new runtime.RequiredError(
                'organisationId',
                'Required parameter "organisationId" was null or undefined when calling getOrgV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations/{organisation_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters['organisationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationViewFromJSON(jsonValue));
    }

    /**
     * Get an organisation by id
     */
    async getOrgV1(requestParameters: GetOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationView> {
        const response = await this.getOrgV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List current user\'s organisations
     */
    async listOrgsV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationSimpleView>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationSimpleViewFromJSON));
    }

    /**
     * List current user\'s organisations
     */
    async listOrgsV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationSimpleView>> {
        const response = await this.listOrgsV1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Remove a member from an organisation
     */
    async removeOrgMemberV1Raw(requestParameters: RemoveOrgMemberV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organisationId'] == null) {
            throw new runtime.RequiredError(
                'organisationId',
                'Required parameter "organisationId" was null or undefined when calling removeOrgMemberV1().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeOrgMemberV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations/{organisation_id}/members/{user_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters['organisationId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a member from an organisation
     */
    async removeOrgMemberV1(requestParameters: RemoveOrgMemberV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeOrgMemberV1Raw(requestParameters, initOverrides);
    }

    /**
     * Update an organisation name
     */
    async renameOrgV1Raw(requestParameters: RenameOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organisationId'] == null) {
            throw new runtime.RequiredError(
                'organisationId',
                'Required parameter "organisationId" was null or undefined when calling renameOrgV1().'
            );
        }

        if (requestParameters['organisationInput'] == null) {
            throw new runtime.RequiredError(
                'organisationInput',
                'Required parameter "organisationInput" was null or undefined when calling renameOrgV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/organisations/{organisation_id}`.replace(`{${"organisation_id"}}`, encodeURIComponent(String(requestParameters['organisationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationInputToJSON(requestParameters['organisationInput']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an organisation name
     */
    async renameOrgV1(requestParameters: RenameOrgV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameOrgV1Raw(requestParameters, initOverrides);
    }

}
