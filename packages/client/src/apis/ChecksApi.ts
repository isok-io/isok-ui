/* tslint:disable */
/* eslint-disable */
/**
 * ISOK API
 * Openapi of isok api
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiCheckInput,
  ApiCheckResult,
  Check,
  CheckSchema,
} from '../models/index';
import {
    ApiCheckInputFromJSON,
    ApiCheckInputToJSON,
    ApiCheckResultFromJSON,
    ApiCheckResultToJSON,
    CheckFromJSON,
    CheckToJSON,
    CheckSchemaFromJSON,
    CheckSchemaToJSON,
} from '../models/index';

export interface CreateCheckV1Request {
    tenant: string;
    apiCheckInput: ApiCheckInput;
}

export interface DeleteCheckV1Request {
    checkId: string;
    tenant: string;
}

export interface GetCheckMetricsV1Request {
    checkId: string;
    tenant: string;
    end: Date;
    points: number;
    start: Date;
}

export interface GetCheckV1Request {
    checkId: string;
    tenant: string;
}

export interface GetChecksSummaryV1Request {
    tenant: string;
    end: Date;
    points: number;
    start: Date;
}

export interface GetChecksV1Request {
    tenant: string;
}

export interface LiveChecksV1Request {
    tenant: string;
}

export interface UpdateCheckV1Request {
    checkId: string;
    tenant: string;
    apiCheckInput: ApiCheckInput;
}

/**
 * 
 */
export class ChecksApi extends runtime.BaseAPI {

    /**
     * Create check
     */
    async createCheckV1Raw(requestParameters: CreateCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling createCheckV1().'
            );
        }

        if (requestParameters['apiCheckInput'] == null) {
            throw new runtime.RequiredError(
                'apiCheckInput',
                'Required parameter "apiCheckInput" was null or undefined when calling createCheckV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCheckInputToJSON(requestParameters['apiCheckInput']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create check
     */
    async createCheckV1(requestParameters: CreateCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createCheckV1Raw(requestParameters, initOverrides);
    }

    /**
     * Delete check
     */
    async deleteCheckV1Raw(requestParameters: DeleteCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['checkId'] == null) {
            throw new runtime.RequiredError(
                'checkId',
                'Required parameter "checkId" was null or undefined when calling deleteCheckV1().'
            );
        }

        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling deleteCheckV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}/{check_id}`.replace(`{${"check_id"}}`, encodeURIComponent(String(requestParameters['checkId']))).replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete check
     */
    async deleteCheckV1(requestParameters: DeleteCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCheckV1Raw(requestParameters, initOverrides);
    }

    /**
     * Get check\'s metrics
     */
    async getCheckMetricsV1Raw(requestParameters: GetCheckMetricsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiCheckResult>>> {
        if (requestParameters['checkId'] == null) {
            throw new runtime.RequiredError(
                'checkId',
                'Required parameter "checkId" was null or undefined when calling getCheckMetricsV1().'
            );
        }

        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling getCheckMetricsV1().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getCheckMetricsV1().'
            );
        }

        if (requestParameters['points'] == null) {
            throw new runtime.RequiredError(
                'points',
                'Required parameter "points" was null or undefined when calling getCheckMetricsV1().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getCheckMetricsV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['points'] != null) {
            queryParameters['points'] = requestParameters['points'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}/{check_id}/metrics`.replace(`{${"check_id"}}`, encodeURIComponent(String(requestParameters['checkId']))).replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiCheckResultFromJSON));
    }

    /**
     * Get check\'s metrics
     */
    async getCheckMetricsV1(requestParameters: GetCheckMetricsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiCheckResult>> {
        const response = await this.getCheckMetricsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get check
     */
    async getCheckV1Raw(requestParameters: GetCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Check>> {
        if (requestParameters['checkId'] == null) {
            throw new runtime.RequiredError(
                'checkId',
                'Required parameter "checkId" was null or undefined when calling getCheckV1().'
            );
        }

        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling getCheckV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}/{check_id}`.replace(`{${"check_id"}}`, encodeURIComponent(String(requestParameters['checkId']))).replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckFromJSON(jsonValue));
    }

    /**
     * Get check
     */
    async getCheckV1(requestParameters: GetCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Check> {
        const response = await this.getCheckV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get checks\' schema
     */
    async getChecksMetaV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CheckSchema>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/checks/meta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckSchemaFromJSON));
    }

    /**
     * Get checks\' schema
     */
    async getChecksMetaV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CheckSchema>> {
        const response = await this.getChecksMetaV1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get tenant\'s checks summary
     */
    async getChecksSummaryV1Raw(requestParameters: GetChecksSummaryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: ApiCheckResult; }>> {
        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling getChecksSummaryV1().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getChecksSummaryV1().'
            );
        }

        if (requestParameters['points'] == null) {
            throw new runtime.RequiredError(
                'points',
                'Required parameter "points" was null or undefined when calling getChecksSummaryV1().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getChecksSummaryV1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['points'] != null) {
            queryParameters['points'] = requestParameters['points'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}/summary`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, ApiCheckResultFromJSON));
    }

    /**
     * Get tenant\'s checks summary
     */
    async getChecksSummaryV1(requestParameters: GetChecksSummaryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: ApiCheckResult; }> {
        const response = await this.getChecksSummaryV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tenant\'s checks
     */
    async getChecksV1Raw(requestParameters: GetChecksV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Check>> {
        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling getChecksV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckFromJSON(jsonValue));
    }

    /**
     * Get tenant\'s checks
     */
    async getChecksV1(requestParameters: GetChecksV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Check> {
        const response = await this.getChecksV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tenant\'s checks updates
     */
    async liveChecksV1Raw(requestParameters: LiveChecksV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling liveChecksV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}/live`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get tenant\'s checks updates
     */
    async liveChecksV1(requestParameters: LiveChecksV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.liveChecksV1Raw(requestParameters, initOverrides);
    }

    /**
     * Update check
     */
    async updateCheckV1Raw(requestParameters: UpdateCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['checkId'] == null) {
            throw new runtime.RequiredError(
                'checkId',
                'Required parameter "checkId" was null or undefined when calling updateCheckV1().'
            );
        }

        if (requestParameters['tenant'] == null) {
            throw new runtime.RequiredError(
                'tenant',
                'Required parameter "tenant" was null or undefined when calling updateCheckV1().'
            );
        }

        if (requestParameters['apiCheckInput'] == null) {
            throw new runtime.RequiredError(
                'apiCheckInput',
                'Required parameter "apiCheckInput" was null or undefined when calling updateCheckV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("UserAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/checks/tenant/{tenant}/{check_id}`.replace(`{${"check_id"}}`, encodeURIComponent(String(requestParameters['checkId']))).replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters['tenant']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCheckInputToJSON(requestParameters['apiCheckInput']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update check
     */
    async updateCheckV1(requestParameters: UpdateCheckV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCheckV1Raw(requestParameters, initOverrides);
    }

}
